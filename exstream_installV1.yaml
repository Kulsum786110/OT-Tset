trigger:
  branches:
    include:
      - dev
      - release

stages:
# ---------------------------
# Stage: Deploy Exstream - DEV
# ---------------------------
- stage: Deploy_Exstream_Dev
  displayName: 'Deploy Exstream - DEV'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  variables:
    - template: vars/vars_dev.yaml
  jobs:
    - job: Exstream_Install_Dev
      displayName: 'Install Exstream on DEV'
      pool:
        name: $(agentPool)
      steps:
        - checkout: self
          displayName: 'Checkout Repository'

        - task: Kubernetes@1
          displayName: 'Apply SecretProviderClass'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
            namespace: '$(namespace)'
            command: 'apply'
            useConfigurationFile: true
            configuration: '$(Build.SourcesDirectory)/$(SecretProviderClass)'
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'

        - task: ReplaceTokens@5
          displayName: 'Replace tokens in Exstream values file'
          inputs:
            targetFiles: '$(Build.SourcesDirectory)/$(helmValuesFile)'
            tokenPrefix: '#{'
            tokenSuffix: '}#'

        - task: Bash@3
          displayName: 'Lint Helm Chart'
          inputs:
            targetType: 'inline'
            script: |
              helm lint $(Build.SourcesDirectory)/$(helmChartFile) -f $(Build.SourcesDirectory)/$(helmValuesFile)

        - task: HelmDeploy@0
          displayName: 'Deploy Exstream Chart to AKS (DEV)'
          inputs:
            connectionType: 'Kubernetes'
            kubernetesServiceConnection: '$(kubernetesServiceConnection)'
            namespace: '$(namespace)'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(Build.SourcesDirectory)/$(helmChartFile)'
            releaseName: '$(releaseName)'
            valueFile: '$(Build.SourcesDirectory)/$(helmValuesFile)'

# ---------------------------
# Stage: Deploy Exstream - E2E
# ---------------------------
- stage: Deploy_Exstream_E2E
  displayName: 'Deploy Exstream - E2E'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/release')
  environment: E2E  # Ensure the E2E environment is configured with pre-deployment approvals
  variables:
    - template: vars/vars_e2e.yaml
  jobs:
    - job: Exstream_Install_E2E
      displayName: 'Install Exstream on E2E'
      pool:
        name: $(agentPool)
      steps:
        - checkout: self
          displayName: 'Checkout Repository'

        - task: Kubernetes@1
          displayName: 'Apply SecretProviderClass'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
            namespace: '$(namespace)'
            command: 'apply'
            useConfigurationFile: true
            configuration: '$(Build.SourcesDirectory)/$(SecretProviderClass)'
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'

        - task: ReplaceTokens@5
          displayName: 'Replace tokens in Exstream values file'
          inputs:
            targetFiles: '$(Build.SourcesDirectory)/$(helmValuesFile)'
            tokenPrefix: '#{'
            tokenSuffix: '}#'

        - task: Bash@3
          displayName: 'Lint Helm Chart'
          inputs:
            targetType: 'inline'
            script: |
              helm lint $(Build.SourcesDirectory)/$(helmChartFile) -f $(Build.SourcesDirectory)/$(helmValuesFile)

        - task: HelmDeploy@0
          displayName: 'Deploy Exstream Chart to AKS (E2E)'
          inputs:
            connectionType: 'Kubernetes'
            kubernetesServiceConnection: '$(kubernetesServiceConnection)'
            namespace: '$(namespace)'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(Build.SourcesDirectory)/$(helmChartFile)'
            releaseName: '$(releaseName)'
            valueFile: '$(Build.SourcesDirectory)/$(helmValuesFile)'

# ---------------------------
# Stage: Deploy Exstream - QA
# ---------------------------
- stage: Deploy_Exstream_QA
  displayName: 'Deploy Exstream - QA'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/release')
  environment: QA  # Ensure the QA environment is configured with pre-deployment approvals
  dependsOn: Deploy_Exstream_E2E
  variables:
    - template: vars/vars_qa.yaml
  jobs:
    - job: Exstream_Install_QA
      displayName: 'Install Exstream on QA'
      pool:
        name: $(agentPool)
      steps:
        - checkout: self
          displayName: 'Checkout Repository'

        - task: Kubernetes@1
          displayName: 'Apply SecretProviderClass'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
            namespace: '$(namespace)'
            command: 'apply'
            useConfigurationFile: true
            configuration: '$(Build.SourcesDirectory)/$(SecretProviderClass)'
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'

        - task: ReplaceTokens@5
          displayName: 'Replace tokens in Exstream values file'
          inputs:
            targetFiles: '$(Build.SourcesDirectory)/$(helmValuesFile)'
            tokenPrefix: '#{'
            tokenSuffix: '}#'

        - task: Bash@3
          displayName: 'Lint Helm Chart'
          inputs:
            targetType: 'inline'
            script: |
              helm lint $(Build.SourcesDirectory)/$(helmChartFile) -f $(Build.SourcesDirectory)/$(helmValuesFile)

        - task: HelmDeploy@0
          displayName: 'Deploy Exstream Chart to AKS (QA)'
          inputs:
            connectionType: 'Kubernetes'
            kubernetesServiceConnection: '$(kubernetesServiceConnection)'
            namespace: '$(namespace)'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(Build.SourcesDirectory)/$(helmChartFile)'
            releaseName: '$(releaseName)'
            valueFile: '$(Build.SourcesDirectory)/$(helmValuesFile)'

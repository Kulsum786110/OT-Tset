name: deploy-helm-chart_$(Date:yyyyMMdd)$(Rev:r)

trigger: none

variables:
- group: ExperienceCloudSecrets  
- name: helmChartVersion
  value: '24.4.0'
- name: helmChartFile
  value: 'opentext-experience-cloud-$(helmChartVersion).tgz'
- name: helmValuesFile
  value: 'values.yaml'
- name: releaseName
  value: 'experience-cloud'  # Helm release name
- name: namespace
  value: 'experience-cloud-ns'  # Namespace where the Helm chart is deployed
- name: kubernetesServiceConnection
  value: 'your-k8s-service-connection'

stages:
  - stage: deploy_chart
    displayName: 'Deploy Helm Chart to AKS'
    jobs:
      - job: deploy_helm_chart
        displayName: 'Deploy Helm Chart'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Checkout@2
            displayName: 'Checkout Git Repository'

          - task: HelmInstaller@0
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'

          - task: Bash@3
            displayName: 'Lint Helm Chart'
            inputs:
              targetType: 'inline'
              script: |
                helm lint $(Build.SourcesDirectory)/$(helmChartFile) -f $(Build.SourcesDirectory)/$(helmValuesFile)

          - task: HelmDeploy@0
            displayName: 'Deploy Helm Chart to AKS'
            inputs:
              connectionType: 'Kubernetes'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              command: 'upgrade'
              releaseName: '$(releaseName)'
              chartType: 'FilePath'
              chartPath: '$(Build.SourcesDirectory)/$(helmChartFile)'
              arguments: '--install --wait --timeout 10m0s --debug -f $(Build.SourcesDirectory)/$(helmValuesFile)'

  - stage: cleanup
    displayName: 'Cleanup Helm Deployment'
    dependsOn: deploy_chart
    condition: always()  # Ensures cleanup runs even if the deployment fails
    jobs:
      - job: delete_helm_chart
        displayName: 'Uninstall Helm Release'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Verify Helm Installation (since Helm is already installed on your agent)
          - script: |
              helm version
            displayName: 'Verify Helm Installation'

          # List existing Helm releases before uninstalling for debugging
          - script: |
              echo "Listing Helm Releases in Namespace: $(namespace)"
              helm list -n $(namespace)
            displayName: 'List Helm Releases'

          - task: Bash@3
            displayName: 'Verify Kubernetes Connection'
            inputs:
              targetType: 'inline'
              script: |
                echo "Verifying access to Kubernetes cluster..."
                kubectl version --short
                kubectl get namespaces

          # Uninstall the Helm release to delete all resources created by the chart
          - task: HelmDeploy@0
            displayName: 'Uninstall Helm Release'
            inputs:
              connectionType: 'Kubernetes'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'  # Target namespace
              command: 'uninstall'
              releaseName: '$(releaseName)'  # Helm release name to uninstall

          # Optionally delete Persistent Volume Claims (PVCs) if not handled by uninstall
          - task: Bash@3
            displayName: 'Delete Persistent Volume Claims (PVCs)'
            inputs:
              targetType: 'inline'
              script: |
                echo "Deleting any leftover Persistent Volume Claims in Namespace: $(namespace)"
                kubectl delete pvc --all -n $(namespace) || true

          # List resources post-cleanup to verify everything is deleted
          - task: Bash@3
            displayName: 'Verify Cleanup - List Remaining Resources'
            inputs:
              targetType: 'inline'
              script: |
                echo "Remaining resources in Namespace: $(namespace)"
                kubectl get all -n $(namespace)
